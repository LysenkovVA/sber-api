import { z } from "zod";

export const SberRublePaymentEntitySchema = z.object({
    // Поля SBER API
    // Номер документа
    number: z.string().optional(),
    // Дата составления документа
    date: z.coerce.date(),
    // Электронные подписи по дайджесту документа
    digestSignatures: z
        .array(
            z.object({
                // Уникальный идентификатор сертификата ключа проверки электронной подписи (UUID)
                certificateUuid: z.string().uuid(),
                // Значение электронной подписи, закодированное в Base64
                // Возможные значения: non-empty
                base64Encoded: z.string(),
            }),
        )
        .optional(),
    // Статус документа
    bankStatus: z.string().optional(),
    // Банковский комментарий к статусу документа
    bankComment: z.string().optional(),
    // Идентификатор документа, присвоенный партнером (UUID)
    externalId: z.string().uuid(),
    // Сумма платежа
    // По умолчанию 0
    amount: z.number(),
    // Код операции
    // Значение должно соответствовать регулярному выражению ^01$
    operationCode: z.string().regex(/^01$/),
    // Идентификатор документа, присвоенный партнером (UUID)
    // Значение должно соответствовать регулярному выражению ^(электронно|срочно|0)
    deliveryKind: z.enum(["электронно", "срочно", "0"]).optional(),
    // Очередность платежа
    // Значение должно соответствовать регулярному выражению ^[1-5]{1}$
    priority: z.string().regex(/^[1-5]{1}$/),
    // Код срочности
    urgencyCode: z.string().optional(),
    // Код вида валютной операции
    // Значение должно соответствовать регулярному выражению ^[0-9]{5}$
    voCode: z.string().regex(/^[0-9]{5}$/),
    // Назначение платежа
    // Допустимые символы:
    // цифры (0-9), латиница (a-z, A-Z) и кириллица (а-я, А-Я, Ёе),
    // спецсимволы: ! " # $ % & ' ( ) [ ] * . , : ; - / \ < = > ? @ ^ _ ` { | } ~ №
    // пробел, перенос строки (\n), возврат каретки (\r).
    purpose: z.string().max(210),
    // Реквизиты налогового, таможенного или иного бюджетного платежа
    departmentalInfo: z
        .object({
            // Уникальный идентификатор платежа
            // Возможные значения: <= 25 characters, Value must match regular expression [A-ZА-Я0-9/]+
            uip: z
                .string()
                .max(25)
                .regex(/[A-ZА-Я0-9/]+/)
                .optional(),
            // Показатель статуса налогоплательщика (реквизит - 101)
            drawerStatus101: z.string().max(2).optional(),
            // Код бюджетной классификации (реквизит - 104)
            // Значение должно соответствовать регулярному выражению ([A-ZА-Я0-9]{1,20})$
            kbk: z
                .string()
                .regex(/([A-ZА-Я0-9]{1,20})$/)
                .optional(),
            // Код OKTMO (реквизит - 105)
            // Значение должно соответствовать регулярному выражению (.{1,11})$
            oktmo: z
                .string()
                .regex(/(.{1,11})$/)
                .optional(),
            // Показатель основания платежа (реквизит - 106)
            // Возможные значения: <= 2 characters
            reasonCode106: z.string().max(2).optional(),
            // Налоговый период / код таможенного органа (реквизит - 107)
            // Значение должно соответствовать регулярному выражению ^(0|[0-9]{8}|([0-9]{2}|МС|КВ|ПЛ|ГД)\.[0-9]{2}\.[0-9]{4})$
            taxPeriod107: z
                .string()
                .regex(
                    /^(0|[0-9]{8}|([0-9]{2}|МС|КВ|ПЛ|ГД)\.[0-9]{2}\.[0-9]{4})$/,
                )
                .optional(),
            // Номер налогового документа (реквизит - 108)
            // Возможные значения: <= 15 characters
            docNumber108: z.string().max(15).optional(),
            // Дата налогового документа (реквизит - 109)
            // Значение должно соответствовать регулярному выражению ^(0|00|[0-9]{2}\.[0-9]{2}\.[0-9]{4})$
            docDate109: z
                .string()
                .regex(/^(0|00|[0-9]{2}\.[0-9]{2}\.[0-9]{4})$/)
                .optional(),
            // Тип налогового платежа (реквизит - 110)
            // Возможные значения: <= 2 characters
            paymentKind110: z.string().max(2).optional(),
        })
        .optional(),
    // Полное наименование плательщика
    // Возможные значения: <= 254 characters
    payerName: z.string().max(254),
    // ИНН плательщика
    // Значение должно соответствовать регулярному выражению ^([0-9]{5}|[0-9]{10}|[0-9]{12}|0)$
    payerInn: z.string().regex(/^([0-9]{5}|[0-9]{10}|[0-9]{12}|0)$/),
    // КПП плательщика
    // Значение должно соответствовать регулярному выражению ^([0-9]{9}|0)$
    payerKpp: z
        .string()
        .regex(/^([0-9]{9}|0)$/)
        .optional(),
    // Счет плательщика
    // Значение должно соответствовать регулярному выражению ^[0-9]{20}$
    payerAccount: z.string().regex(/^[0-9]{20}$/),
    // БИК банка плательщика
    // Значение должно соответствовать регулярному выражению ^[0-9]{9}$
    payerBankBic: z.string().regex(/^[0-9]{9}$/),
    // Корсчет банка плательщика
    // Значение должно соответствовать регулярному выражению ^[0-9]{20}$
    payerBankCorrAccount: z.string().regex(/^[0-9]{20}$/),
    // Полное наименование получателя платежа
    // Возможные значения: <= 254 characters
    payeeName: z.string().max(254),
    // ИНН получателя платежа
    // Значение должно соответствовать регулярному выражению ^([0-9]{5}|[0-9]{10}|[0-9]{12}|0)$
    payeeInn: z
        .string()
        .regex(/^([0-9]{5}|[0-9]{10}|[0-9]{12}|0)$/)
        .optional(),
    // КПП получателя платежа
    // Значение должно соответствовать регулярному выражению ^([0-9]{9}|0)$
    payeeKpp: z
        .string()
        .regex(/^([0-9]{9}|0)$/)
        .optional(),
    // Счет получателя платежа
    // Значение должно соответствовать регулярному выражению ^[0-9]{20}$
    payeeAccount: z
        .string()
        .regex(/^[0-9]{20}$/)
        .optional(),
    // БИК получателя платежа
    // Значение должно соответствовать регулярному выражению ^[0-9]{9}$
    payeeBankBic: z.string().regex(/^[0-9]{9}$/),
    // Корсчет банка получателя платежа
    // Значение должно соответствовать регулярному выражению ^[0-9]{20}$
    payeeBankCorrAccount: z
        .string()
        .regex(/^[0-9]{20}$/)
        .optional(),
    // Hash от ключевых полей документа
    crucialFieldsHash: z.string().optional(),
    // Данные НДС
    vat: z
        .object({
            // Способ расчета НДС
            type: z.enum(["INCLUDED", "ONTOP", "NO_VAT", "MANUAL"]),
            // Ставка НДС
            // Значение должно соответствовать регулярному выражению ^(0|5|7|10|20)$
            rate: z
                .string()
                .regex(/^(0|5|7|10|20)$/)
                .nullable(),
            // Сумма НДС
            amount: z.number().nullable(),
        })
        .nullable(),
    // Код вида дохода получателей выплаты по 229-ФЗ
    // Возможные значения: <= 2 characters
    incomeTypeCode: z.string().max(2).optional(),
    // Признак того, что платежное поручение будет оплачено за счет кредитных средств
    isPaidByCredit: z.boolean().optional(),
    // Номер кредитного договора
    // Возможные значения: <= 50 characters
    creditContractNumber: z.string().max(50).optional(),
});

export type SberRublePaymentEntity = z.infer<
    typeof SberRublePaymentEntitySchema
>;
